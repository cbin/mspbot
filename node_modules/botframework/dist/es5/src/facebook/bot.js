"use strict";
var interfaces_1 = require('../interfaces');
var interfaces_2 = require('./interfaces');
var api_1 = require('./api');
var Promise = require('bluebird');
var FacebookReply = (function () {
    function FacebookReply(recipientId, fbApi) {
        this.recipientId = recipientId;
        this.fbApi = fbApi;
    }
    FacebookReply.prototype.text = function (text) {
        var response = {
            recipient: {
                id: this.recipientId
            },
            message: { text: text }
        };
        return this.fbApi.sendMessage(response);
    };
    FacebookReply.prototype.list = function (elements) {
        var response = {
            recipient: {
                id: this.recipientId
            },
            message: {
                attachment: {
                    type: interfaces_2.FB_RESPONSE_ATTACHMENT_TYPE.TEMPLATE,
                    payload: {
                        template_type: interfaces_2.FB_RESPONSE_ATTACHMENT_PAYLOAD_TYPE.GENERIC,
                        elements: elements
                    }
                }
            }
        };
        return this.fbApi.sendMessage(response);
    };
    FacebookReply.prototype.buttons = function (text, buttons) {
        var response = {
            recipient: {
                id: this.recipientId
            },
            message: {
                attachment: {
                    type: interfaces_2.FB_RESPONSE_ATTACHMENT_TYPE.TEMPLATE,
                    payload: {
                        template_type: interfaces_2.FB_RESPONSE_ATTACHMENT_PAYLOAD_TYPE.BUTTON,
                        text: text,
                        buttons: buttons
                    }
                }
            }
        };
        return this.fbApi.sendMessage(response);
    };
    return FacebookReply;
}());
exports.FacebookReply = FacebookReply;
var FacebookBot = (function () {
    function FacebookBot(settings, botController) {
        this.settings = settings;
        this.botController = botController;
        this.profiles = {};
        this.fbApi = null;
        this.fbApi = new api_1.FacebookApi(settings);
    }
    FacebookBot.prototype.receiveMessage = function (fbMessage) {
        var promises = [];
        if (this.settings.debug)
            console.log('received message ..', JSON.stringify(fbMessage, null, 2));
        if (fbMessage.object !== interfaces_2.FB_MESSAGE_TYPE.PAGE)
            return Promise.reject('invalid message type');
        for (var _i = 0, _a = fbMessage.entry; _i < _a.length; _i++) {
            var entry = _a[_i];
            // skip messages for other page_id
            if (entry.id.toString() !== this.settings.fb.page_id) {
                console.log('skipping', JSON.stringify(entry, null, 2));
                continue;
            }
            if (this.settings.debug)
                console.log('messaging ..', JSON.stringify(entry.messaging, null, 2));
            for (var _b = 0, _c = entry.messaging; _b < _c.length; _b++) {
                var messaging = _c[_b];
                var p = this.getUserFromMessage(messaging)
                    .then(this.dispatchSingleMessage.bind(this, messaging))
                    .catch(function (err) {
                    console.log("error retrieving user " + JSON.stringify(err));
                    throw err;
                });
                promises.push(p);
            }
        }
        return Promise.all(promises);
    };
    FacebookBot.prototype.dispatchSingleMessage = function (messaging, user) {
        var reply = new FacebookReply(messaging.sender.id, this.fbApi);
        if (messaging.delivery) {
            var request_1 = {
                user: user, delivery: messaging.delivery, type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
            };
            return (this.botController.delivered) ? this.botController.delivered(request_1, reply) : null;
        }
        if (this.settings.debug)
            console.log('dispatching..');
        if (messaging.optin) {
            return (this.botController.newUser) ? this.botController.newUser({
                user: user, ref: messaging.optin.ref,
                type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
            }, reply) : null;
        }
        if (messaging.postback) {
            return (this.botController.postback) ? this.botController.postback({
                user: user, payload: messaging.postback.payload,
                type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
            }, reply) : null;
        }
        if (messaging.message) {
            if (messaging.message.text) {
                var textMessage = {
                    user: user,
                    text: messaging.message.text,
                    type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
                };
                if (this.settings.debug)
                    console.log(JSON.stringify(textMessage));
                return (this.botController.textMessage) ? this.botController.textMessage(textMessage, reply) : null;
            }
            if (messaging.message.attachments) {
                return this.dispatchAttachmentMessage(messaging, user);
            }
        }
        var request = {
            user: user, raw: messaging,
            type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
        };
        return (this.botController.catchAll) ? this.botController.catchAll(request, reply) : null;
    };
    FacebookBot.prototype.dispatchAttachmentMessage = function (messaging, user) {
        var reply = new FacebookReply(messaging.sender.id, this.fbApi);
        for (var _i = 0, _a = messaging.message.attachments; _i < _a.length; _i++) {
            var attachment = _a[_i];
            switch (attachment.type) {
                case interfaces_2.FB_ATTACHMENT_TYPE.IMAGE:
                    var imageMessage = {
                        user: user, link: { url: attachment.payload.url },
                        type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
                    };
                    this.botController.imageMessage(imageMessage, reply) || null;
                    break;
                case interfaces_2.FB_ATTACHMENT_TYPE.AUDIO:
                    var audioMessage = {
                        user: user, link: { url: attachment.payload.url },
                        type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
                    };
                    this.botController.audioMessage(audioMessage, reply) || null;
                    break;
                case interfaces_2.FB_ATTACHMENT_TYPE.VIDEO:
                    var videoMessage = {
                        user: user, link: { url: attachment.payload.url },
                        type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
                    };
                    this.botController.videoMessage(videoMessage, reply) || null;
                    break;
                case interfaces_2.FB_ATTACHMENT_TYPE.LOCATION:
                    var location_1 = {
                        user: user, location: { coordinates: attachment.payload.coordinates }, type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK
                    };
                    if (attachment.title) {
                        location_1.location.title = attachment.title;
                    }
                    (this.botController.locationMessage) ? this.botController.locationMessage(location_1, reply) : null;
                    break;
                case interfaces_2.FB_ATTACHMENT_TYPE.FALLBACK:
                    if (attachment.payload === null) {
                        var link = { user: user, link: { url: attachment.url, title: attachment.title }, type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK };
                        (this.botController.linkMessage) ? this.botController.linkMessage(link, reply) : null;
                    }
                    break;
                default:
                    var request = { user: user, raw: messaging, type: interfaces_1.BOT_REQUEST_TYPE.FACEBOOK };
                    (this.botController.catchAll) ? this.botController.catchAll(request, reply) : null;
                    break;
            }
        }
    };
    FacebookBot.prototype.getUserProfile = function (userId) {
        var _this = this;
        if (this.profiles[userId]) {
            return Promise.resolve(this.profiles[userId]);
        }
        return this.fbApi.getUserDetails(userId)
            .then(function (profile) {
            _this.profiles[userId] = profile;
            return profile;
        })
            .catch(function (err) {
            console.log('facebook: could not get profile, returning empty');
            return {};
        });
    };
    FacebookBot.prototype.getUserFromMessage = function (messaging) {
        return this.getUserProfile(messaging.sender.id)
            .then(function (profile) {
            return {
                id: messaging.sender.id.toString(),
                firstname: profile.first_name || null,
                lastname: profile.last_name || null,
                avatar: profile.profile_pic || null,
                gender: profile.gender || null,
                timezone: profile.timezone || null,
            };
        });
    };
    return FacebookBot;
}());
exports.FacebookBot = FacebookBot;
//# sourceMappingURL=bot.js.map